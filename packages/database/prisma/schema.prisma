// RegIntel Database Schema
// Aligned with ADR-0001 data model requirements

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// Auth & Users (NextAuth.js v5 compatible)
// ============================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          UserRole  @default(VIEWER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  reviews        Review[]
  publications   Publication[]
  auditLogs      AuditLog[]
  searchSessions SearchSession[]

  @@map("users")
}

enum UserRole {
  VIEWER
  REVIEWER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================
// RegIntel Core Domain
// ============================================

model SourceItem {
  id              String      @id @default(cuid())
  url             String      @unique
  canonicalPdfUrl String?
  sourceDomain    String
  type            SourceType
  title           String
  publishedAt     DateTime?
  fetchedAt       DateTime    @default(now())
  contentHash     String      @unique
  status          ItemStatus  @default(INTAKE)
  raindropId      String?     @unique
  tags            Json        @default("[]") // Array of strings
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  analyses Analysis[]
  reviews  Review[]

  @@index([status])
  @@index([publishedAt])
  @@index([sourceDomain])
  @@map("source_items")
}

enum SourceType {
  GUIDANCE
  WARNING_LETTER
  UNTITLED_LETTER
  MEETING
  APPROVAL
  PRESS
}

enum ItemStatus {
  INTAKE
  REVIEW
  APPROVED
  REJECTED
  PUBLISHED
}

model Analysis {
  id           String   @id @default(cuid())
  sourceItemId String
  summaryMd    String   @db.Text
  impactMd     String   @db.Text
  citations    Json     @default("[]") // Array of {url, locator, quote?}
  modelMeta    Json     @default("{}") // {model, temperature, tokens, etc.}
  createdBy    String?
  createdAt    DateTime @default(now())
  supersedesId String?  @unique

  sourceItem SourceItem @relation(fields: [sourceItemId], references: [id], onDelete: Cascade)
  supersedes Analysis?  @relation("AnalysisHistory", fields: [supersedesId], references: [id])
  superseded Analysis?  @relation("AnalysisHistory")

  @@index([sourceItemId])
  @@map("analyses")
}

model Review {
  id           String         @id @default(cuid())
  sourceItemId String
  reviewerId   String
  decision     ReviewDecision
  notesMd      String?        @db.Text
  createdAt    DateTime       @default(now())

  sourceItem SourceItem @relation(fields: [sourceItemId], references: [id], onDelete: Cascade)
  reviewer   User       @relation(fields: [reviewerId], references: [id])

  @@index([sourceItemId])
  @@index([reviewerId])
  @@map("reviews")
}

enum ReviewDecision {
  APPROVE
  REJECT
  REVISE
}

model Publication {
  id           String   @id @default(cuid())
  week         String // Format: YYYY-WW
  publishedAt  DateTime @default(now())
  publisherId  String
  artifactUrls Json     @default("{}") // {web: "/regintel/2025-01", emailId: "msg_123", slackTs: "1234.56"}
  checksum     String

  publisher User @relation(fields: [publisherId], references: [id])

  @@unique([week])
  @@index([publishedAt])
  @@map("publications")
}

// ============================================
// Audit & Compliance
// ============================================

model AuditLog {
  id       String   @id @default(cuid())
  actor    String
  action   String // e.g., "source_item.approved", "user.role_changed"
  entity   String // e.g., "source_item", "user"
  entityId String
  diff     Json     @default("{}") // {before: {...}, after: {...}}
  at       DateTime @default(now())

  user User @relation(fields: [actor], references: [id])

  @@index([actor])
  @@index([entity, entityId])
  @@index([at])
  @@map("audit_logs")
}

model SearchSession {
  id        String   @id @default(cuid())
  userId    String
  title     String   @default("New Search")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  queries SearchQuery[]

  @@index([userId])
  @@index([createdAt])
  @@map("search_sessions")
}

model SearchQuery {
  id        String   @id @default(cuid())
  sessionId String
  query     String
  results   Json     @default("[]") // Array of search results
  createdAt DateTime @default(now())

  session SearchSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([createdAt])
  @@map("search_queries")
}

// ============================================
// Configuration
// ============================================

model AllowedDomain {
  id                 String    @id @default(cuid())
  domain             String    @unique // e.g., "fda.gov", "ema.europa.eu"
  description        String?   // e.g., "FDA - US Food and Drug Administration"
  active             Boolean   @default(true)
  discoveryInterval  Int       @default(86400) // Seconds between discoveries (default 24 hours)
  lastDiscoveredAt   DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([active])
  @@index([lastDiscoveredAt])
  @@map("allowed_domains")
}

model RssFeed {
  id              String              @id @default(cuid())
  url             String              @unique
  title           String
  description     String?
  classifications RssFeedClassification[] @default([]) // What types to look for
  pollInterval    Int                 @default(3600) // Seconds between polls (default 1 hour)
  active          Boolean             @default(true)
  lastPolledAt    DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@index([active])
  @@index([lastPolledAt])
  @@map("rss_feeds")
}

enum RssFeedClassification {
  APPROVAL
  GUIDANCE
  SAFETY_ALERT
  OTHER
}
